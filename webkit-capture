#!/usr/bin/env python
# vim:set ts=4 sw=4 et:

import sys
import optparse

import cairo
from gi.repository import GObject, Gtk, Gdk, WebKit, Soup

def capture(url, filename, options):
    window = Gtk.OffscreenWindow.new()
    webview = WebKit.WebView.new()
    webview.load_uri(url)

    webview.set_zoom_level(options.zoom)

    # In scroll mode, we wrap the window in a scrolled window to "look"
    # like a browser.
    if options.scroll:
        sw = Gtk.ScrolledWindow.new(None, None)
        sw.set_size_request(options.width, options.height)
        sw.add(webview)
        window.add(sw)
    else:
        webview.set_size_request(options.width, options.height)
        window.add(webview)

    window.show_all()

    def save_capture(window):
        allocation = window.get_allocation()

        surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, allocation.width, allocation.height)
        cr = cairo.Context(surface)
        window.draw(cr)

        if options.crop:
            print "Cropping: origin (%d, %d), size %dx%d" % (options.crop_x, options.crop_y, options.crop_w, options.crop_h)
            cropped_surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, options.crop_w, options.crop_h)
            cr = cairo.Context(cropped_surface)
            cr.set_source_surface(surface, -options.crop_x, -options.crop_y)
            cr.paint()
            surface = cropped_surface

        surface.write_to_png(filename)
        sys.exit(0)
        return False

    def on_load_status_changed(webview, pspec, window):
        if webview.props.load_status == WebKit.LoadStatus.FINISHED:
            # We must wait for the layout to be finalized before scrolling.
            if options.scroll:
                sw.get_hadjustment().set_value(options.scroll_x)
                sw.get_vadjustment().set_value(options.scroll_y)

            # We put the capture saving in an idle because when the notify is
            # received, the rendering might not be finished.
            GObject.idle_add(save_capture, window)

    webview.connect_after('notify::load-status', on_load_status_changed, window)
    print "Waiting for page to load before capturing"

    Gtk.main()
    sys.exit(1)

def main():
    usage = "%prog [options] <url> <filename>"

    parser = optparse.OptionParser(usage)
    parser.add_option("-g", "--geometry", type="str", default="800x600",
                      help="minimum geometry of the browser (default: 800x600)")
    parser.add_option("-s", "--scroll", type="str", default=None,
                      help="scroll to coordinates (default: not set)")
    parser.add_option("-z", "--zoom", type="float", default=1.0,
                      help="zoom level of browser (default: 1.0)")
    parser.add_option("-c", "--crop", type="str", default=None,
                      help="crop the picture to the given area (default: not set)")
    parser.add_option("--cookies", type="string",
                      help="read cookies from a Mozilla cookie file")

    (options, args) = parser.parse_args()

    if len(args) == 0:
        parser.print_usage()
        return

    options.width, options.height = map(int, options.geometry.split('x'))
    if options.scroll:
        options.scroll_x, options.scroll_y = map(int, options.scroll.split(','))

    if options.zoom <= 0.0:
        parser.error("scale cannot be zero")

    if options.crop:
        options.crop_w, options.crop_h, options.crop_x, options.crop_y = map(int, options.crop.replace('x', '+').split('+'))

    if options.cookies:
        session = WebKit.get_default_session()
        session.add_feature(Soup.CookieJarText.new(opeions.cookies, True))

    capture(args[0], args[1], options)

if __name__ == '__main__':
    main()
