#!/usr/bin/env python
# vim:set ts=4 sw=4 et:

import sys
import optparse
import time

import cairo
from gi.repository import GObject, Gtk, Gdk, WebKit, Soup


class WebGrabber(object):
    def __init__(self, url, filename, options):
        self.url = url
        self.filename = filename
        self.options = options

    def capture(self):
        window = Gtk.OffscreenWindow.new()
        webview = WebKit.WebView.new()
        webview.load_uri(self.url)

        webview.set_zoom_level(self.options.zoom)

        # In scroll mode, we wrap the window in a scrolled window to "look"
        # like a browser.
        if self.options.scroll:
            sw = Gtk.ScrolledWindow.new(None, None)
            sw.set_size_request(self.options.width, self.options.height)
            sw.add(webview)
            window.add(sw)
        else:
            webview.set_size_request(self.options.width, self.options.height)
            window.add(webview)
            sw = None

        webview.connect_after('notify::load-status', self.on_load_status_changed, window, sw)
        print "Waiting for page to load before capturing"

        window.show_all()
        Gtk.main()
        sys.exit(1)

    def save_capture(self, window):
        allocation = window.get_allocation()

        surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, allocation.width, allocation.height)
        cr = cairo.Context(surface)
        window.draw(cr)

        if self.options.crop:
            cropped_surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, self.options.crop_w, self.options.crop_h)
            cr = cairo.Context(cropped_surface)
            cr.set_source_surface(surface, -self.options.crop_x, -self.options.crop_y)
            cr.paint()
            surface = cropped_surface

        if self.options.point:
            cursor_surface = cairo.ImageSurface.create_from_png('left_ptr.png')
            cr = cairo.Context(surface)
            cr.set_source_surface(cursor_surface, self.options.point_x-6, self.options.point_y-2)
            cr.paint()

        surface.write_to_png(self.filename)
        sys.exit(0)
        return False

    def find_device(self, display):
        for device in display.get_device_manager().list_devices(Gdk.DeviceType.MASTER):
            if device.get_source() == Gdk.InputSource.MOUSE:
                return device
        print "No mouse device found"

    def make_motion_event(self, webview, x, y):
        window = webview.get_window()
        display = window.get_display()
        origin = window.get_origin()[1:] # discard the int return value.

        e = Gdk.Event.new(Gdk.EventType.MOTION_NOTIFY)
        e.any.window = window
        e.any.send_event = False
        e.motion.time = time.time()
        e.motion.state = 0
        e.motion.x = x
        e.motion.x_root = origin[0] + x
        e.motion.y = y
        e.motion.y_root = origin[1] + y
        e.motion.is_hint = False
        e.motion.device = self.find_device(display)

        display.put_event(e)

    def on_load_status_changed(self, webview, pspec, window, sw):
        if webview.props.load_status == WebKit.LoadStatus.FINISHED:
            # We must wait for the layout to be finalized before scrolling.
            if self.options.scroll:
                sw.get_hadjustment().set_value(self.options.scroll_x)
                sw.get_vadjustment().set_value(self.options.scroll_y)

            # Handle the --execute option.
            if self.options.script:
                webview.execute_script(self.options.script)

            # Simulate the mouse hovering the web page.
            if self.options.point:
                self.make_motion_event(webview, self.options.point_x, self.options.point_y)

            # We put the capture saving in an idle because when the notify is
            # received, the rendering might not be finished.
            GObject.timeout_add_seconds(1, self.save_capture, window)


def main():
    usage = "%prog [options] <url> <filename>"

    parser = optparse.OptionParser(usage)
    parser.add_option("-g", "--geometry", type="str", default="800x600",
                      help="minimum geometry of the browser (default: 800x600)")
    parser.add_option("-s", "--scroll", type="str", default=None,
                      help="scroll to coordinates (default: not set)")
    parser.add_option("-z", "--zoom", type="float", default=1.0,
                      help="zoom level of browser (default: 1.0)")
    parser.add_option("-c", "--crop", type="str", default=None,
                      help="crop the picture to the given area (default: not set)")
    parser.add_option("--cookies", type="string",
                      help="read cookies from a Mozilla cookie file")
    parser.add_option("-p", "--point", type="string",
                      help="display pointer at the given coordinates (default: not set)")
    parser.add_option("-x", "--execute", dest="script", type="string", metavar="SCRIPT",
                      help="execute a script when the page is loaded")

    (options, args) = parser.parse_args()

    if len(args) == 0:
        parser.print_usage()
        return

    options.width, options.height = map(int, options.geometry.split('x'))
    if options.scroll:
        options.scroll_x, options.scroll_y = map(int, options.scroll.split(','))

    if options.zoom <= 0.0:
        parser.error("scale cannot be zero")

    if options.crop:
        options.crop_w, options.crop_h, options.crop_x, options.crop_y = map(int, options.crop.replace('x', '+').split('+'))

    if options.cookies:
        session = WebKit.get_default_session()
        session.add_feature(Soup.CookieJarText.new(options.cookies, True))

    if options.point:
        options.point_x, options.point_y = map(int, options.point.split(','))

    WebGrabber(args[0], args[1], options).capture()

if __name__ == '__main__':
    main()
